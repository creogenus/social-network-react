{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\react-projects\\\\01-first-project\\\\first-app\\\\src\\\\Components\\\\Users\\\\UsersContainer.jsx\";\nimport { followChangeAC, setCurrentPageAC, setTotalUsersCountAC, setUsersAC, toggleIsFetchingAC } from \"../../redux/users-reducer\";\nimport * as axios from \"axios\";\nimport * as React from \"react\";\nimport Users from \"./Users\";\nimport preloader from './../../assets/images/2.gif';\n\nconst {\n  connect\n} = require(\"react-redux\");\n\nclass UsersC extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onPageChanged = p => {\n      this.props.toggleIsFetching(true);\n      this.props.setCurrentPage(p);\n      axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${p}&count=${this.props.pageSize}`).then(response => {\n        this.props.setUsers(response.data.items);\n        this.props.toggleIsFetching(false);\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.toggleIsFetching(true);\n    axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`).then(response => {\n      this.props.setUsers(response.data.items);\n      this.props.setTotalUsersCount(response.data.totalCount);\n      this.props.toggleIsFetching(false);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Users, {\n        totalUsersCount: this.props.totalUsersCount,\n        pageSize: this.props.pageSize,\n        currentPage: this.props.currentPage,\n        onPageChanged: this.onPageChanged,\n        users: this.props.users,\n        followChanged: this.props.followChanged,\n        isFetching: this.props.isFetching\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    users: state.usersPage.users,\n    pageSize: state.usersPage.pageSize,\n    totalUsersCount: state.usersPage.totalUsersCount,\n    currentPage: state.usersPage.currentPage,\n    isFetching: state.usersPage.isFetching\n  };\n};\n\nlet mapDispatchToProps = dispatch => {\n  return {\n    followChanged: userID => {\n      dispatch(followChangeAC(userID));\n    },\n    setUsers: users => {\n      dispatch(setUsersAC(users));\n    },\n    setCurrentPage: currentPage => {\n      dispatch(setCurrentPageAC(currentPage));\n    },\n    setTotalUsersCount: totalUsersCount => {\n      dispatch(setTotalUsersCountAC(totalUsersCount));\n    },\n    toggleIsFetching: isFetching => {\n      dispatch(toggleIsFetchingAC(isFetching));\n    }\n  };\n};\n\nconst UsersContainer = connect(mapStateToProps, mapDispatchToProps)(UsersC);\nexport default UsersContainer;","map":{"version":3,"sources":["D:/react-projects/01-first-project/first-app/src/Components/Users/UsersContainer.jsx"],"names":["followChangeAC","setCurrentPageAC","setTotalUsersCountAC","setUsersAC","toggleIsFetchingAC","axios","React","Users","preloader","connect","require","UsersC","Component","onPageChanged","p","props","toggleIsFetching","setCurrentPage","get","pageSize","then","response","setUsers","data","items","componentDidMount","currentPage","setTotalUsersCount","totalCount","render","totalUsersCount","users","followChanged","isFetching","mapStateToProps","state","usersPage","mapDispatchToProps","dispatch","userID","UsersContainer"],"mappings":"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","sourcesContent":["import {\r\n    followChangeAC,\r\n    setCurrentPageAC,\r\n    setTotalUsersCountAC,\r\n    setUsersAC,\r\n    toggleIsFetchingAC\r\n} from \"../../redux/users-reducer\";\r\nimport * as axios from \"axios\";\r\nimport * as React from \"react\";\r\nimport Users from \"./Users\";\r\nimport preloader from './../../assets/images/2.gif'\r\n\r\nconst {connect} = require(\"react-redux\");\r\n\r\nclass UsersC extends React.Component {\r\n\r\n\r\n    componentDidMount() {\r\n        this.props.toggleIsFetching(true);\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`).then(response => {\r\n\r\n            this.props.setUsers(response.data.items);\r\n            this.props.setTotalUsersCount(response.data.totalCount);\r\n            this.props.toggleIsFetching(false);\r\n        })\r\n\r\n    }\r\n\r\n    onPageChanged = (p) => {\r\n        this.props.toggleIsFetching(true);\r\n        this.props.setCurrentPage(p)\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${p}&count=${this.props.pageSize}`).then(response => {\r\n\r\n            this.props.setUsers(response.data.items);\r\n            this.props.toggleIsFetching(false);\r\n        })\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n\r\n                <Users totalUsersCount={this.props.totalUsersCount}\r\n                       pageSize={this.props.pageSize}\r\n                       currentPage={this.props.currentPage}\r\n                       onPageChanged={this.onPageChanged}\r\n                       users={this.props.users}\r\n                       followChanged={this.props.followChanged}\r\n                       isFetching={this.props.isFetching}\r\n\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        followChanged: (userID) => {\r\n            dispatch(followChangeAC(userID))\r\n        },\r\n        setUsers: (users) => {\r\n            dispatch(setUsersAC(users))\r\n        },\r\n        setCurrentPage: (currentPage) => {\r\n            dispatch(setCurrentPageAC(currentPage))\r\n        },\r\n        setTotalUsersCount: (totalUsersCount) => {\r\n            dispatch(setTotalUsersCountAC(totalUsersCount))\r\n        },\r\n        toggleIsFetching: (isFetching) => {\r\n            dispatch(toggleIsFetchingAC(isFetching))\r\n        }\r\n    }\r\n}\r\n\r\nconst UsersContainer = connect(mapStateToProps, mapDispatchToProps)(UsersC)\r\nexport default UsersContainer;"]},"metadata":{},"sourceType":"module"}