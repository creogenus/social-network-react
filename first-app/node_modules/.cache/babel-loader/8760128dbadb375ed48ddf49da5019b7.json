{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\react-projects\\\\01-first-project\\\\first-app\\\\src\\\\Components\\\\Users\\\\UsersContainer.jsx\";\nimport { followChangeAC, setCurrentPageAC, setTotalUsersCountAC, setUsersAC, toggleIsFetchingAC } from \"../../redux/users-reducer\";\nimport * as axios from \"axios\";\nimport * as React from \"react\";\nimport Users from \"./Users\";\nimport Preloader from \"../common/Preloader/Preloader\";\nimport { getUsers } from \"../../api/api\";\n\nconst {\n  connect\n} = require(\"react-redux\");\n\nclass UsersC extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onPageChanged = p => {\n      this.props.toggleIsFetching(true);\n      this.props.setCurrentPage(p);\n      axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${p}&count=${this.props.pageSize}`, {\n        withCredentials: true\n      }).then(response => {\n        this.props.setUsers(response.data.items);\n        this.props.toggleIsFetching(false);\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.toggleIsFetching(true);\n    getUsers();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [this.props.isFetching ? /*#__PURE__*/_jsxDEV(Preloader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 42\n      }, this) : null, /*#__PURE__*/_jsxDEV(Users, {\n        totalUsersCount: this.props.totalUsersCount,\n        pageSize: this.props.pageSize,\n        currentPage: this.props.currentPage,\n        onPageChanged: this.onPageChanged,\n        users: this.props.users,\n        followChanged: this.props.followChanged,\n        isFetching: this.props.isFetching\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    users: state.usersPage.users,\n    pageSize: state.usersPage.pageSize,\n    totalUsersCount: state.usersPage.totalUsersCount,\n    currentPage: state.usersPage.currentPage,\n    isFetching: state.usersPage.isFetching\n  };\n};\n\nlet mapDispatchToProps = dispatch => {\n  return {\n    followChanged: userID => {\n      dispatch(followChangeAC(userID));\n    },\n    setUsers: users => {\n      dispatch(setUsersAC(users));\n    },\n    setCurrentPage: currentPage => {\n      dispatch(setCurrentPageAC(currentPage));\n    },\n    setTotalUsersCount: totalUsersCount => {\n      dispatch(setTotalUsersCountAC(totalUsersCount));\n    },\n    toggleIsFetching: isFetching => {\n      dispatch(toggleIsFetchingAC(isFetching));\n    }\n  };\n};\n\nconst UsersContainer = connect(mapStateToProps, mapDispatchToProps)(UsersC);\nexport default UsersContainer;","map":{"version":3,"sources":["D:/react-projects/01-first-project/first-app/src/Components/Users/UsersContainer.jsx"],"names":["followChangeAC","setCurrentPageAC","setTotalUsersCountAC","setUsersAC","toggleIsFetchingAC","axios","React","Users","Preloader","getUsers","connect","require","UsersC","Component","onPageChanged","p","props","toggleIsFetching","setCurrentPage","get","pageSize","withCredentials","then","response","setUsers","data","items","componentDidMount","render","isFetching","totalUsersCount","currentPage","users","followChanged","mapStateToProps","state","usersPage","mapDispatchToProps","dispatch","userID","setTotalUsersCount","UsersContainer"],"mappings":"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","sourcesContent":["import {\r\n    followChangeAC,\r\n    setCurrentPageAC,\r\n    setTotalUsersCountAC,\r\n    setUsersAC,\r\n    toggleIsFetchingAC\r\n} from \"../../redux/users-reducer\";\r\nimport * as axios from \"axios\";\r\nimport * as React from \"react\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {getUsers} from \"../../api/api\";\r\n\r\nconst {connect} = require(\"react-redux\");\r\n\r\nclass UsersC extends React.Component {\r\n\r\n\r\n    componentDidMount() {\r\n        this.props.toggleIsFetching(true);\r\n        getUsers();\r\n    }\r\n\r\n    onPageChanged = (p) => {\r\n        this.props.toggleIsFetching(true);\r\n        this.props.setCurrentPage(p)\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${p}&count=${this.props.pageSize}`,{withCredentials:true}).then(response => {\r\n\r\n            this.props.setUsers(response.data.items);\r\n            this.props.toggleIsFetching(false);\r\n        })\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                {this.props.isFetching ? <Preloader/> : null}\r\n                <Users totalUsersCount={this.props.totalUsersCount}\r\n                       pageSize={this.props.pageSize}\r\n                       currentPage={this.props.currentPage}\r\n                       onPageChanged={this.onPageChanged}\r\n                       users={this.props.users}\r\n                       followChanged={this.props.followChanged}\r\n                       isFetching={this.props.isFetching}\r\n\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        followChanged: (userID) => {\r\n            dispatch(followChangeAC(userID))\r\n        },\r\n        setUsers: (users) => {\r\n            dispatch(setUsersAC(users))\r\n        },\r\n        setCurrentPage: (currentPage) => {\r\n            dispatch(setCurrentPageAC(currentPage))\r\n        },\r\n        setTotalUsersCount: (totalUsersCount) => {\r\n            dispatch(setTotalUsersCountAC(totalUsersCount))\r\n        },\r\n        toggleIsFetching: (isFetching) => {\r\n            dispatch(toggleIsFetchingAC(isFetching))\r\n        }\r\n    }\r\n}\r\n\r\nconst UsersContainer = connect(mapStateToProps, mapDispatchToProps)(UsersC)\r\nexport default UsersContainer;"]},"metadata":{},"sourceType":"module"}