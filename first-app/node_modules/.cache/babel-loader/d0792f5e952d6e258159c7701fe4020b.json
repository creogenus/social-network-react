{"ast":null,"code":"import { profileAPI } from \"../api/api\";\nimport store from \"./redux-store\";\nimport { stopSubmit } from \"redux-form\";\nexport const ADD_POST = 'ADD-POST';\nexport const UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\nexport const SET_USER_PROFILE = 'SET-USER-PROFILE';\nexport const GET_USER_STATUS = 'GET-USER-STATUS';\nexport const DELETE_POST = 'DELETE-POST';\nexport const SAVE_PHOTO = 'SAVE-PHOTO';\nlet initialState = {\n  posts: [{\n    id: 1,\n    message: 'My Last post!',\n    likes_count: 22\n  }, {\n    id: 2,\n    message: 'My First post!',\n    likes_count: 10\n  }],\n  profile: null,\n  status: \"ALOXA\"\n};\n\nconst profileReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      {\n        let newPost = {\n          id: 3,\n          message: action.post,\n          likes_count: 1\n        };\n        let stateCopy = { ...state\n        };\n        stateCopy.posts = [...state.posts];\n        stateCopy.posts.push(newPost);\n        stateCopy.newPostText = '';\n        return stateCopy;\n      }\n\n    case UPDATE_NEW_POST_TEXT:\n      {\n        let stateCopy = { ...state\n        };\n        stateCopy.newPostText = action.newText;\n        return stateCopy;\n      }\n\n    case SET_USER_PROFILE:\n      {\n        return { ...state,\n          profile: action.profile\n        };\n      }\n\n    case GET_USER_STATUS:\n      {\n        return { ...state,\n          status: action.status\n        };\n      }\n\n    case DELETE_POST:\n      {\n        return { ...state,\n          posts: state.posts.filter(post => post.id != action.postID)\n        };\n      }\n\n    case SAVE_PHOTO:\n      {\n        return { ...state,\n          profile: { ...state.profile,\n            photos: action.photos\n          }\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport let addPostActionCreator = post => {\n  return {\n    type: ADD_POST,\n    post\n  };\n};\nexport let updateNewPostTextActionCreator = newText => {\n  return {\n    type: UPDATE_NEW_POST_TEXT,\n    newText: newText\n  };\n};\nexport let deletePostActionCreator = postID => {\n  return {\n    type: DELETE_POST,\n    postID\n  };\n};\nexport let setUserProfile = profile => {\n  return {\n    type: SET_USER_PROFILE,\n    profile\n  };\n};\nexport let savePhotoSuccess = photos => {\n  return {\n    type: SAVE_PHOTO,\n    photos\n  };\n};\nexport let getUserStatus = status => {\n  return {\n    type: GET_USER_STATUS,\n    status\n  };\n};\nexport let getUserStatusThunkCreator = userID => {\n  return async dispatch => {\n    let response = await profileAPI.getUsersStatus(userID);\n    dispatch(getUserStatus(response.data));\n  };\n};\nexport let postUserStatusThunkCreator = status => async dispatch => {\n  let response = await profileAPI.postUsersStatus(status);\n  dispatch(getUserStatus(status));\n};\nexport const setUserProfileThunkCreator = userID => {\n  return async dispatch => {\n    let response = await profileAPI.setUserProfile(userID);\n    dispatch(setUserProfile(response.data));\n  };\n};\nexport let savePhotoThunkCreator = file => async dispatch => {\n  let response = await profileAPI.savePhoto(file);\n  dispatch(savePhotoSuccess(response.data.data.photos));\n};\nexport let saveProfileThunkCreator = profileData => async dispatch => {\n  const userID = store.getState().auth.userID;\n  let response = await profileAPI.saveProfile(profileData);\n  if (response.data.resultCode === 0) dispatch(setUserProfileThunkCreator(userID));else {\n    dispatch(stopSubmit('profile-edit', {\n      _error: response.data.messages[0]\n    }));\n    return Promise.reject(response.data.messages[0]);\n  }\n};\nexport default profileReducer;","map":{"version":3,"sources":["D:/react-projects/01-first-project/first-app/src/redux/profile-reducer.js"],"names":["profileAPI","store","stopSubmit","ADD_POST","UPDATE_NEW_POST_TEXT","SET_USER_PROFILE","GET_USER_STATUS","DELETE_POST","SAVE_PHOTO","initialState","posts","id","message","likes_count","profile","status","profileReducer","state","action","type","newPost","post","stateCopy","push","newPostText","newText","filter","postID","photos","addPostActionCreator","updateNewPostTextActionCreator","deletePostActionCreator","setUserProfile","savePhotoSuccess","getUserStatus","getUserStatusThunkCreator","userID","dispatch","response","getUsersStatus","data","postUserStatusThunkCreator","postUsersStatus","setUserProfileThunkCreator","savePhotoThunkCreator","file","savePhoto","saveProfileThunkCreator","profileData","getState","auth","saveProfile","resultCode","_error","messages","Promise","reject"],"mappings":"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","sourcesContent":["import {profileAPI} from \"../api/api\";\r\nimport store from \"./redux-store\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nexport const ADD_POST = 'ADD-POST'\r\nexport const UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT'\r\nexport const SET_USER_PROFILE = 'SET-USER-PROFILE'\r\nexport const GET_USER_STATUS = 'GET-USER-STATUS'\r\nexport const DELETE_POST = 'DELETE-POST'\r\nexport const SAVE_PHOTO = 'SAVE-PHOTO'\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'My Last post!', likes_count: 22},\r\n        {id: 2, message: 'My First post!', likes_count: 10}\r\n    ],\r\n    profile: null,\r\n    status: \"ALOXA\"\r\n};\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 3,\r\n                message: action.post,\r\n                likes_count: 1\r\n            };\r\n            let stateCopy = {...state};\r\n            stateCopy.posts = [...state.posts];\r\n            stateCopy.posts.push(newPost)\r\n            stateCopy.newPostText = '';\r\n            return stateCopy;\r\n        }\r\n\r\n        case  UPDATE_NEW_POST_TEXT: {\r\n            let stateCopy = {...state};\r\n\r\n            stateCopy.newPostText = action.newText;\r\n            return stateCopy;\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case GET_USER_STATUS: {\r\n\r\n            return {...state, status: action.status}\r\n        }\r\n        case DELETE_POST: {\r\n            return {...state, posts: state.posts.filter(post => post.id != action.postID)}\r\n        }\r\n        case SAVE_PHOTO:{\r\n            return {...state, profile:{...state.profile, photos:action.photos}}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport let addPostActionCreator = (post) => {\r\n\r\n    return {\r\n        type: ADD_POST,\r\n        post\r\n    }\r\n};\r\n\r\nexport let updateNewPostTextActionCreator = (newText) => {\r\n    return {\r\n        type: UPDATE_NEW_POST_TEXT,\r\n        newText: newText\r\n    }\r\n};\r\n\r\nexport let deletePostActionCreator = (postID) => {\r\n    return {\r\n        type: DELETE_POST,\r\n        postID\r\n    }\r\n}\r\n\r\nexport let setUserProfile = (profile) => {\r\n\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        profile\r\n    }\r\n}\r\n\r\nexport let savePhotoSuccess = (photos) =>{\r\n    return{\r\n        type: SAVE_PHOTO,\r\n        photos\r\n    }\r\n\r\n}\r\n\r\nexport let getUserStatus = (status) => {\r\n    return {\r\n        type: GET_USER_STATUS,\r\n        status\r\n    }\r\n}\r\nexport let getUserStatusThunkCreator = (userID) => {\r\n    return async (dispatch) => {\r\n        let response = await profileAPI.getUsersStatus(userID);\r\n        dispatch(getUserStatus(response.data));\r\n    }\r\n}\r\n\r\nexport let postUserStatusThunkCreator = (status) => async (dispatch) => {\r\n    let response = await profileAPI.postUsersStatus(status);\r\n    dispatch(getUserStatus(status));\r\n\r\n\r\n}\r\n\r\n\r\nexport const setUserProfileThunkCreator = (userID) => {\r\n    return async (dispatch) => {\r\n\r\n        let response = await profileAPI.setUserProfile(userID)\r\n        dispatch(setUserProfile(response.data));\r\n    }\r\n}\r\n\r\nexport let savePhotoThunkCreator = (file) => async (dispatch) => {\r\n    let response = await profileAPI.savePhoto(file);\r\n    dispatch(savePhotoSuccess(response.data.data.photos));\r\n}\r\n\r\nexport let saveProfileThunkCreator = (profileData) => async (dispatch) =>{\r\n   const userID = store.getState().auth.userID\r\n    let response = await profileAPI.saveProfile(profileData)\r\n    if(response.data.resultCode === 0)\r\n    dispatch(setUserProfileThunkCreator(userID))\r\n    else{\r\n        dispatch(stopSubmit('profile-edit',{_error:response.data.messages[0]}))\r\n        return Promise.reject(response.data.messages[0]);\r\n    }\r\n}\r\n\r\n\r\nexport default profileReducer;"]},"metadata":{},"sourceType":"module"}