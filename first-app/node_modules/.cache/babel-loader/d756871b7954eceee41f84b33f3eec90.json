{"ast":null,"code":"import { authAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nimport { Redirect } from \"react-router-dom\";\nexport const SET_AUTH_USER_DATA = 'SET-AUTH-USER-DATA';\nlet initialState = {\n  userID: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\n\nlet authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_AUTH_USER_DATA:\n      {\n        return { ...state,\n          ...action.data,\n          isAuth: action.isAuth\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (userID, email, login, isAuth) => ({\n  type: SET_AUTH_USER_DATA,\n  data: {\n    userID,\n    email,\n    login\n  },\n  isAuth\n});\nexport const setAuthUserThunkCreator = () => dispatch => {\n  {\n    authAPI.setAuthorizedProfile().then(response => {\n      if (response.data.resultCode === 0) {\n        let {\n          id,\n          login,\n          email\n        } = response.data.data;\n        dispatch(setAuthUserData(id, email, login, true));\n      }\n    });\n  }\n};\nexport const loginThunkCreator = (email, password, rememberMe) => dispatch => {\n  {\n    authAPI.login(email, password, rememberMe).then(response => {\n      if (response.data.resultCode === 0) dispatch(setAuthUserThunkCreator());else {\n        debugger;\n        dispatch(stopSubmit('login', {\n          error: response.data.messages[0]\n        }));\n      }\n    });\n  }\n};\nexport const logoutThunkCreator = () => {\n  return dispatch => {\n    authAPI.logout().then(response => {\n      dispatch(setAuthUserData(null, null, null, false));\n    });\n  };\n};\nexport default authReducer;","map":{"version":3,"sources":["D:/react-projects/01-first-project/first-app/src/redux/auth-reducer.js"],"names":["authAPI","stopSubmit","Redirect","SET_AUTH_USER_DATA","initialState","userID","email","login","isAuth","authReducer","state","action","type","data","setAuthUserData","setAuthUserThunkCreator","dispatch","setAuthorizedProfile","then","response","resultCode","id","loginThunkCreator","password","rememberMe","error","messages","logoutThunkCreator","logout"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,YAAtB;AACA,SAAQC,UAAR,QAAyB,YAAzB;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AAEA,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AAGP,IAAIC,YAAY,GAAE;AACdC,EAAAA,MAAM,EAAC,IADO;AAEdC,EAAAA,KAAK,EAAC,IAFQ;AAGdC,EAAAA,KAAK,EAAC,IAHQ;AAIdC,EAAAA,MAAM,EAAC;AAJO,CAAlB;;AAOA,IAAIC,WAAW,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAiC;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,kBAAL;AAAwB;AACpB,eAAO,EACH,GAAGO,KADA;AAEH,aAAGC,MAAM,CAACE,IAFP;AAGHL,UAAAA,MAAM,EAAEG,MAAM,CAACH;AAHZ,SAAP;AAKH;;AACD;AACI,aAAOE,KAAP;AATR;AAWH,CAZD;;AAcA,OAAO,MAAMI,eAAe,GAAG,CAACT,MAAD,EAASC,KAAT,EAAeC,KAAf,EAAsBC,MAAtB,MAAiC;AAACI,EAAAA,IAAI,EAACT,kBAAN;AAA0BU,EAAAA,IAAI,EAAC;AAACR,IAAAA,MAAD;AAAQC,IAAAA,KAAR;AAAcC,IAAAA;AAAd,GAA/B;AAAqDC,EAAAA;AAArD,CAAjC,CAAxB;AACP,OAAO,MAAMO,uBAAuB,GAAG,MAAOC,QAAD,IAAa;AACtD;AACIhB,IAAAA,OAAO,CAACiB,oBAAR,GAA+BC,IAA/B,CAAoCC,QAAQ,IAAI;AAC5C,UAAGA,QAAQ,CAACN,IAAT,CAAcO,UAAd,KAA6B,CAAhC,EACA;AACI,YAAG;AAACC,UAAAA,EAAD;AAAKd,UAAAA,KAAL;AAAYD,UAAAA;AAAZ,YAAqBa,QAAQ,CAACN,IAAT,CAAcA,IAAtC;AACAG,QAAAA,QAAQ,CAACF,eAAe,CAACO,EAAD,EAAIf,KAAJ,EAAUC,KAAV,EAAgB,IAAhB,CAAhB,CAAR;AACH;AACJ,KAND;AAOH;AACJ,CAVM;AAYP,OAAO,MAAOe,iBAAiB,GAAG,CAAChB,KAAD,EAAQiB,QAAR,EAAkBC,UAAlB,KAAkCR,QAAD,IAAa;AAC5E;AACIhB,IAAAA,OAAO,CAACO,KAAR,CAAcD,KAAd,EAAoBiB,QAApB,EAA6BC,UAA7B,EAAyCN,IAAzC,CAA8CC,QAAQ,IAAG;AACrD,UAAGA,QAAQ,CAACN,IAAT,CAAcO,UAAd,KAA6B,CAAhC,EAAmCJ,QAAQ,CAACD,uBAAuB,EAAxB,CAAR,CAAnC,KACI;AACA;AACAC,QAAAA,QAAQ,CAACf,UAAU,CAAC,OAAD,EAAU;AAACwB,UAAAA,KAAK,EAACN,QAAQ,CAACN,IAAT,CAAca,QAAd,CAAuB,CAAvB;AAAP,SAAV,CAAX,CAAR;AACH;AACJ,KAND;AAOH;AACJ,CAVM;AAWP,OAAO,MAAOC,kBAAkB,GAAG,MAAK;AACpC,SAAOX,QAAD,IAAa;AACfhB,IAAAA,OAAO,CAAC4B,MAAR,GAAiBV,IAAjB,CAAsBC,QAAQ,IAAG;AAE7BH,MAAAA,QAAQ,CAACF,eAAe,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,KAAhB,CAAhB,CAAR;AACH,KAHD;AAIH,GALD;AAMH,CAPM;AASP,eAAgBL,WAAhB","sourcesContent":["import {authAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const SET_AUTH_USER_DATA = 'SET-AUTH-USER-DATA'\r\n\r\n\r\nlet initialState ={\r\n    userID:null,\r\n    email:null,\r\n    login:null,\r\n    isAuth:false\r\n}\r\n\r\nlet authReducer = (state = initialState, action) =>{\r\n    switch (action.type){\r\n        case SET_AUTH_USER_DATA:{\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: action.isAuth\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (userID, email,login, isAuth) =>({type:SET_AUTH_USER_DATA, data:{userID,email,login}, isAuth})\r\nexport const setAuthUserThunkCreator = () => (dispatch) =>{\r\n    {\r\n        authAPI.setAuthorizedProfile().then(response => {\r\n            if(response.data.resultCode === 0)\r\n            {\r\n                let{id, login, email} = response.data.data;\r\n                dispatch(setAuthUserData(id,email,login,true));\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const  loginThunkCreator = (email, password, rememberMe) => (dispatch) =>{\r\n    {\r\n        authAPI.login(email,password,rememberMe).then(response =>{\r\n            if(response.data.resultCode === 0) dispatch(setAuthUserThunkCreator())\r\n            else{\r\n                debugger\r\n                dispatch(stopSubmit('login', {error:response.data.messages[0]}));\r\n            }\r\n        })\r\n    }\r\n}\r\nexport const  logoutThunkCreator = () =>{\r\n    return(dispatch) =>{\r\n        authAPI.logout().then(response =>{\r\n\r\n            dispatch(setAuthUserData(null,null,null,false))\r\n        })\r\n    }\r\n}\r\n\r\nexport  default authReducer;"]},"metadata":{},"sourceType":"module"}