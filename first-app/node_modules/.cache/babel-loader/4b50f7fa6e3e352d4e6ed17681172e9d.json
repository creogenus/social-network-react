{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\react-projects\\\\01-first-project\\\\first-app\\\\src\\\\Components\\\\Users\\\\UsersContainer.jsx\";\nimport { followChangeAC, setCurrentPageAC, setTotalUsersCountAC, setUsersAC, toggleIsFetchingAC } from \"../../redux/users-reducer\";\nimport * as axios from \"axios\";\nimport * as React from \"react\";\nimport Users from \"./Users\";\nimport preloader from './../../assets/images/2.gif';\n\nconst {\n  connect\n} = require(\"react-redux\");\n\nclass UsersC extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onPageChanged = p => {\n      this.props.setCurrentPage(p);\n      axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${p}&count=${this.props.pageSize}`).then(response => {\n        this.props.setUsers(response.data.items);\n      });\n    };\n  }\n\n  componentDidMount() {\n    axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`).then(response => {\n      this.props.setUsers(response.data.items);\n      this.props.setTotalUsersCount(response.data.totalCount);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: this.props.isFetching ? preloader : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Users, {\n        totalUsersCount: this.props.totalUsersCount,\n        pageSize: this.props.pageSize,\n        currentPage: this.props.currentPage,\n        onPageChanged: this.onPageChanged,\n        users: this.props.users,\n        followChanged: this.props.followChanged,\n        isFetching: this.props.isFetching,\n        toggleIsFetching: this.props.toggleIsFetching\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    users: state.usersPage.users,\n    pageSize: state.usersPage.pageSize,\n    totalUsersCount: state.usersPage.totalUsersCount,\n    currentPage: state.usersPage.currentPage,\n    isFetching: state.usersPage.isFetching\n  };\n};\n\nlet mapDispatchToProps = dispatch => {\n  return {\n    followChanged: userID => {\n      dispatch(followChangeAC(userID));\n    },\n    setUsers: users => {\n      dispatch(setUsersAC(users));\n    },\n    setCurrentPage: currentPage => {\n      dispatch(setCurrentPageAC(currentPage));\n    },\n    setTotalUsersCount: totalUsersCount => {\n      dispatch(setTotalUsersCountAC(totalUsersCount));\n    },\n    toggleIsFetching: () => {\n      dispatch(toggleIsFetchingAC());\n    }\n  };\n};\n\nconst UsersContainer = connect(mapStateToProps, mapDispatchToProps)(UsersC);\nexport default UsersContainer;","map":{"version":3,"sources":["D:/react-projects/01-first-project/first-app/src/Components/Users/UsersContainer.jsx"],"names":["followChangeAC","setCurrentPageAC","setTotalUsersCountAC","setUsersAC","toggleIsFetchingAC","axios","React","Users","preloader","connect","require","UsersC","Component","onPageChanged","p","props","setCurrentPage","get","pageSize","then","response","setUsers","data","items","componentDidMount","currentPage","setTotalUsersCount","totalCount","render","isFetching","totalUsersCount","users","followChanged","toggleIsFetching","mapStateToProps","state","usersPage","mapDispatchToProps","dispatch","userID","UsersContainer"],"mappings":"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","sourcesContent":["\r\nimport {\r\n    followChangeAC,\r\n    setCurrentPageAC,\r\n    setTotalUsersCountAC,\r\n    setUsersAC,\r\n    toggleIsFetchingAC\r\n} from \"../../redux/users-reducer\";\r\nimport * as axios from \"axios\";\r\nimport * as React from \"react\";\r\nimport Users from \"./Users\";\r\nimport preloader from './../../assets/images/2.gif'\r\nconst {connect} = require(\"react-redux\");\r\n\r\nclass UsersC extends React.Component {\r\n\r\n\r\n    componentDidMount() {\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`).then(response => {\r\n\r\n            this.props.setUsers(response.data.items);\r\n            this.props.setTotalUsersCount(response.data.totalCount);\r\n\r\n        })\r\n    }\r\n\r\n    onPageChanged = (p) =>{\r\n        this.props.setCurrentPage(p)\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${p}&count=${this.props.pageSize}`).then(response => {\r\n\r\n            this.props.setUsers(response.data.items);\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                <img src = {this.props.isFetching? preloader: null}></img>\r\n                <Users totalUsersCount = {this.props.totalUsersCount}\r\n                       pageSize ={this.props.pageSize}\r\n                       currentPage ={this.props.currentPage}\r\n                       onPageChanged = {this.onPageChanged}\r\n                       users ={this.props.users}\r\n                       followChanged ={this.props.followChanged}\r\n                       isFetching ={this.props.isFetching}\r\n                       toggleIsFetching={this.props.toggleIsFetching}\r\n            />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) =>{\r\n\r\n    return{\r\n        users:state.usersPage.users,\r\n        pageSize:state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) =>{\r\n    return{\r\n        followChanged: (userID) =>{\r\n           dispatch(followChangeAC(userID))\r\n        },\r\n        setUsers:(users) =>{\r\n            dispatch(setUsersAC(users))\r\n        },\r\n        setCurrentPage:(currentPage) =>{\r\n            dispatch(setCurrentPageAC(currentPage))\r\n        },\r\n        setTotalUsersCount:(totalUsersCount) =>{\r\n            dispatch(setTotalUsersCountAC(totalUsersCount))\r\n        },\r\n        toggleIsFetching:()=>{\r\n            dispatch(toggleIsFetchingAC())\r\n        }\r\n    }\r\n}\r\n\r\nconst UsersContainer = connect(mapStateToProps,mapDispatchToProps)(UsersC)\r\nexport default UsersContainer;"]},"metadata":{},"sourceType":"module"}