{"ast":null,"code":"import { authAPI, securityAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nimport { Redirect } from \"react-router-dom\";\nexport const SET_AUTH_USER_DATA = 'SET-AUTH-USER-DATA';\nconst GET_CAPTCHA_URL = 'GET-CAPTCHA-URL';\nlet initialState = {\n  userID: null,\n  email: null,\n  login: null,\n  isAuth: false,\n  captchaUrl: null\n};\n\nlet authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_AUTH_USER_DATA:\n      {\n        return { ...state,\n          ...action.data,\n          isAuth: action.isAuth\n        };\n      }\n\n    case GET_CAPTCHA_URL:\n      {\n        return { ...state,\n          captchaUrl: action.captcha\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (userID, email, login, isAuth) => ({\n  type: SET_AUTH_USER_DATA,\n  data: {\n    userID,\n    email,\n    login\n  },\n  isAuth\n});\nexport const setAuthUserThunkCreator = () => async dispatch => {\n  {\n    let response = await authAPI.setAuthorizedProfile();\n\n    if (response.data.resultCode === 0) {\n      let {\n        id,\n        login,\n        email\n      } = response.data.data;\n      dispatch(setAuthUserData(id, email, login, true));\n    }\n  }\n};\nexport const loginThunkCreator = (email, password, rememberMe) => async dispatch => {\n  let response = await authAPI.login(email, password, rememberMe);\n  if (response.data.resultCode === 0) dispatch(setAuthUserThunkCreator());else {\n    if (response.data.resultCode === 10) {\n      dispatch(getCaptchaUrlThunkCreator());\n    } else {\n      let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n      dispatch(stopSubmit(\"login\", {\n        _error: message\n      }));\n    }\n  }\n};\n\nconst getCaptchaUrl = captcha => ({\n  type: GET_CAPTCHA_URL,\n  captcha\n});\n\nexport const getCaptchaUrlThunkCreator = () => async dispatch => {\n  let response = await securityAPI.getCaptchaURL();\n  const captchaUrl = response.data.url;\n  dispatch(getCaptchaUrl(captchaUrl));\n};\nexport const logoutThunkCreator = () => {\n  return async dispatch => {\n    let response = await authAPI.logout();\n    dispatch(setAuthUserData(null, null, null, false));\n  };\n};\nexport default authReducer;","map":{"version":3,"sources":["D:/react-projects/01-first-project/first-app/src/redux/auth-reducer.js"],"names":["authAPI","securityAPI","stopSubmit","Redirect","SET_AUTH_USER_DATA","GET_CAPTCHA_URL","initialState","userID","email","login","isAuth","captchaUrl","authReducer","state","action","type","data","captcha","setAuthUserData","setAuthUserThunkCreator","dispatch","response","setAuthorizedProfile","resultCode","id","loginThunkCreator","password","rememberMe","getCaptchaUrlThunkCreator","message","messages","length","_error","getCaptchaUrl","getCaptchaURL","url","logoutThunkCreator","logout"],"mappings":"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","sourcesContent":["import {authAPI, securityAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const SET_AUTH_USER_DATA = 'SET-AUTH-USER-DATA'\r\nconst GET_CAPTCHA_URL = 'GET-CAPTCHA-URL'\r\n\r\n\r\nlet initialState = {\r\n    userID: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captchaUrl: null\r\n}\r\n\r\nlet authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_AUTH_USER_DATA: {\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: action.isAuth\r\n            }\r\n        }\r\n        case GET_CAPTCHA_URL: {\r\n            return {\r\n                ...state,\r\n                captchaUrl: action.captcha\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (userID, email, login, isAuth) => ({\r\n    type: SET_AUTH_USER_DATA,\r\n    data: {userID, email, login},\r\n    isAuth\r\n})\r\nexport const setAuthUserThunkCreator = () => async (dispatch) => {\r\n    {\r\n        let response = await authAPI.setAuthorizedProfile()\r\n        if (response.data.resultCode === 0) {\r\n            let {id, login, email} = response.data.data;\r\n            dispatch(setAuthUserData(id, email, login, true));\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const loginThunkCreator = (email, password, rememberMe) => async (dispatch) => {\r\n    let response = await authAPI.login(email, password, rememberMe)\r\n    if (response.data.resultCode === 0) dispatch(setAuthUserThunkCreator())\r\n    else {\r\n        if(response.data.resultCode === 10)\r\n        {\r\n            dispatch(getCaptchaUrlThunkCreator())\r\n        }\r\n        else\r\n        {\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", {_error: message}));}\r\n    }\r\n\r\n}\r\nconst getCaptchaUrl = (captcha) => ({\r\n    type:GET_CAPTCHA_URL,\r\n        captcha\r\n})\r\n\r\nexport const getCaptchaUrlThunkCreator = () => async (dispatch) => {\r\n    let response = await securityAPI.getCaptchaURL();\r\n    const captchaUrl = response.data.url;\r\n    dispatch(getCaptchaUrl(captchaUrl))\r\n\r\n}\r\nexport const logoutThunkCreator = () => {\r\n    return async (dispatch) => {\r\n        let response = await authAPI.logout()\r\n        dispatch(setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\n\r\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}