{"ast":null,"code":"import { profileAPI } from \"../api/api\";\nexport const ADD_POST = 'ADD-POST';\nexport const UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\nexport const SET_USER_PROFILE = 'SET-USER-PROFILE';\nlet initialState = {\n  posts: [{\n    id: 1,\n    message: 'My Last post!',\n    likes_count: 22\n  }, {\n    id: 2,\n    message: 'My First post!',\n    likes_count: 10\n  }],\n  profile: null,\n  newPostText: 'value 123'\n};\n\nconst profileReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      {\n        let newPost = {\n          id: 3,\n          message: state.newPostText,\n          likes_count: 1\n        };\n        let stateCopy = { ...state\n        };\n        stateCopy.posts = [...state.posts];\n        stateCopy.posts.push(newPost);\n        stateCopy.newPostText = '';\n        return stateCopy;\n      }\n\n    case UPDATE_NEW_POST_TEXT:\n      {\n        let stateCopy = { ...state\n        };\n        stateCopy.newPostText = action.newText;\n        return stateCopy;\n      }\n\n    case SET_USER_PROFILE:\n      {\n        return { ...state,\n          profile: action.profile\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport let addPostActionCreator = () => {\n  return {\n    type: ADD_POST\n  };\n};\nexport let updateNewPostTextActionCreator = newText => {\n  return {\n    type: UPDATE_NEW_POST_TEXT,\n    newText: newText\n  };\n};\nexport let setUserProfile = profile => {\n  return {\n    type: SET_USER_PROFILE,\n    profile\n  };\n};\nexport const setUserProfileThunkCreator = userID => {\n  return dispatch => {\n    profileAPI.setUserProfile(userID).then(response => {\n      dispatch(setUserProfile(response.data));\n    });\n  };\n};\nexport default profileReducer;","map":{"version":3,"sources":["D:/react-projects/01-first-project/first-app/src/redux/profile-reducer.js"],"names":["profileAPI","ADD_POST","UPDATE_NEW_POST_TEXT","SET_USER_PROFILE","initialState","posts","id","message","likes_count","profile","newPostText","profileReducer","state","action","type","newPost","stateCopy","push","newText","addPostActionCreator","updateNewPostTextActionCreator","setUserProfile","setUserProfileThunkCreator","userID","dispatch","then","response","data"],"mappings":"AAAA,SAAQA,UAAR,QAAyB,YAAzB;AAEA,OAAO,MAAMC,QAAQ,GAAG,UAAjB;AACP,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AAEP,IAAIC,YAAY,GAAG;AACfC,EAAAA,KAAK,EAAE,CACH;AAACC,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,OAAO,EAAE,eAAjB;AAAkCC,IAAAA,WAAW,EAAE;AAA/C,GADG,EAEH;AAACF,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,OAAO,EAAE,gBAAjB;AAAmCC,IAAAA,WAAW,EAAE;AAAhD,GAFG,CADQ;AAKfC,EAAAA,OAAO,EAAE,IALM;AAMfC,EAAAA,WAAW,EAAE;AANE,CAAnB;;AASA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAAkC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKb,QAAL;AAAe;AACX,YAAIc,OAAO,GAAG;AACVT,UAAAA,EAAE,EAAE,CADM;AAEVC,UAAAA,OAAO,EAAEK,KAAK,CAACF,WAFL;AAGVF,UAAAA,WAAW,EAAE;AAHH,SAAd;AAKA,YAAIQ,SAAS,GAAG,EAAC,GAAGJ;AAAJ,SAAhB;AACAI,QAAAA,SAAS,CAACX,KAAV,GAAkB,CAAC,GAAGO,KAAK,CAACP,KAAV,CAAlB;AACAW,QAAAA,SAAS,CAACX,KAAV,CAAgBY,IAAhB,CAAqBF,OAArB;AACAC,QAAAA,SAAS,CAACN,WAAV,GAAwB,EAAxB;AACA,eAAOM,SAAP;AACH;;AAED,SAAMd,oBAAN;AAA4B;AACxB,YAAIc,SAAS,GAAG,EAAC,GAAGJ;AAAJ,SAAhB;AAEAI,QAAAA,SAAS,CAACN,WAAV,GAAwBG,MAAM,CAACK,OAA/B;AACA,eAAOF,SAAP;AACH;;AACD,SAAKb,gBAAL;AAAuB;AACnB,eAAO,EAAC,GAAGS,KAAJ;AAAWH,UAAAA,OAAO,EAAEI,MAAM,CAACJ;AAA3B,SAAP;AACH;;AACD;AACI,aAAOG,KAAP;AAxBR;AA0BH,CA3BD;;AA6BA,OAAO,IAAIO,oBAAoB,GAAG,MAAM;AAEpC,SAAO;AACHL,IAAAA,IAAI,EAAEb;AADH,GAAP;AAGH,CALM;AAOP,OAAO,IAAImB,8BAA8B,GAAIF,OAAD,IAAa;AACrD,SAAO;AACHJ,IAAAA,IAAI,EAAEZ,oBADH;AAEHgB,IAAAA,OAAO,EAAEA;AAFN,GAAP;AAIH,CALM;AAOP,OAAO,IAAIG,cAAc,GAAIZ,OAAD,IAAa;AACrC,SAAO;AACHK,IAAAA,IAAI,EAAEX,gBADH;AAEHM,IAAAA;AAFG,GAAP;AAIH,CALM;AAQP,OAAO,MAAMa,0BAA0B,GAAIC,MAAD,IAAY;AAClD,SAAQC,QAAD,IAAc;AAEjBxB,IAAAA,UAAU,CAACqB,cAAX,CAA0BE,MAA1B,EAAkCE,IAAlC,CAAuCC,QAAQ,IAAI;AAE/CF,MAAAA,QAAQ,CAACH,cAAc,CAACK,QAAQ,CAACC,IAAV,CAAf,CAAR;AAEH,KAJD;AAKH,GAPD;AAQH,CATM;AAYP,eAAehB,cAAf","sourcesContent":["import {profileAPI} from \"../api/api\";\r\n\r\nexport const ADD_POST = 'ADD-POST'\r\nexport const UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT'\r\nexport const SET_USER_PROFILE = 'SET-USER-PROFILE'\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'My Last post!', likes_count: 22},\r\n        {id: 2, message: 'My First post!', likes_count: 10}\r\n    ],\r\n    profile: null,\r\n    newPostText: 'value 123'\r\n};\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 3,\r\n                message: state.newPostText,\r\n                likes_count: 1\r\n            };\r\n            let stateCopy = {...state};\r\n            stateCopy.posts = [...state.posts];\r\n            stateCopy.posts.push(newPost)\r\n            stateCopy.newPostText = '';\r\n            return stateCopy;\r\n        }\r\n\r\n        case  UPDATE_NEW_POST_TEXT: {\r\n            let stateCopy = {...state};\r\n\r\n            stateCopy.newPostText = action.newText;\r\n            return stateCopy;\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport let addPostActionCreator = () => {\r\n\r\n    return {\r\n        type: ADD_POST\r\n    }\r\n};\r\n\r\nexport let updateNewPostTextActionCreator = (newText) => {\r\n    return {\r\n        type: UPDATE_NEW_POST_TEXT,\r\n        newText: newText\r\n    }\r\n};\r\n\r\nexport let setUserProfile = (profile) => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        profile\r\n    }\r\n}\r\n\r\n\r\nexport const setUserProfileThunkCreator = (userID) => {\r\n    return (dispatch) => {\r\n\r\n        profileAPI.setUserProfile(userID).then(response => {\r\n\r\n            dispatch(setUserProfile(response.data));\r\n\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport default profileReducer;"]},"metadata":{},"sourceType":"module"}