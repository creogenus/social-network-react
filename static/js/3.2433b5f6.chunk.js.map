{"version":3,"sources":["Components/Dialogs/Dialogs.module.css","Components/Dialogs/DialogItem/DialogItem.jsx","Components/Dialogs/MessageItem/MesssageItem.jsx","Components/Dialogs/AddMessageForm/AddMessageForm.jsx","Components/Dialogs/Dialogs.jsx","Components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","to","profile_id","name","MessageItem","message","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","requiredFields","maxLength300","placeholder","AddMessage","formData","console","log","sendMessage","Dialogs","DialogMessages","DialogsMessages","DialogsElements","DialogsProfiles","map","profile","MessagesElements","isAuth","className","style","dialogs","dialogsItems","dialog","active","messages","compose","connect","state","messagesPage","profiles","newMessageBody","auth","dispatch","updateNewMessageBody","text","sendMessageActionCreator","withAuthRedirect"],"mappings":"iGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,0B,sFCOpMC,EANG,SAACC,GAChB,OAAO,8BACH,cAAC,IAAD,CAASC,GAAI,YAAcD,EAAME,WAAjC,SAA8CF,EAAMG,UCC5CC,EAJI,SAACJ,GACjB,OAAO,8BAAMA,EAAMK,W,0CCUjBC,EAAsBC,YAAU,CAClCC,KAAK,eADmBD,EARP,SAACP,GAClB,OAAM,uBAAMS,SAAUT,EAAMU,aAAtB,UACF,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAWV,KAAM,UAAWW,SAAU,CAACC,IAAgBC,KAAcC,YAAY,sGACnG,8BACI,qJAmBGC,EAXE,SAAClB,GAMd,OAAO,8BACH,cAACM,EAAD,CAAqBG,SANR,SAACU,GACdC,QAAQC,IAAIF,GACZnB,EAAMsB,YAAYH,EAASd,eCyBpBkB,EApCC,SAACvB,GACZ,IAAIwB,EAAiBxB,EAAMyB,gBAExBC,EADmB1B,EAAM2B,gBACSC,KAAI,SAACC,GAAD,OAAa,cAAC,EAAD,CAAY1B,KAAM0B,EAAQ1B,KAAMD,WAAY2B,EAAQ3B,gBACvG4B,EAAmBN,EAAeI,KAAI,SAACvB,GAAD,OAAa,cAAC,EAAD,CAAcA,QAAWA,EAAQA,aAWxF,OAAKL,EAAM+B,OAEP,sBAAKC,UAAWC,IAAMC,QAAtB,UACI,qBAAKF,UAAWC,IAAME,aAAtB,SACI,qBAAKH,UAAS,UAAKC,IAAMG,OAAX,YAAqBH,IAAMI,QAAzC,SAAqDX,MAEzD,sBAAKM,UAAWC,IAAMK,SAAtB,UACI,qBAAKN,UAAaC,IAAM5B,QAAxB,SAAkCyB,IAKlC,cAAC,EAAD,CAAYR,YAActB,EAAMsB,iBAEpC,2BAdkB,cAAC,IAAD,CAAUrB,GAAI,Y,wBCK7BsC,sBACXC,mBAtBkB,SAACC,GACnB,MAAO,CACHd,gBAAiBc,EAAMC,aAAaC,SACpClB,gBAAiBgB,EAAMC,aAAaR,QACpCU,eAAgBH,EAAMC,aAAaE,eACnCb,OAAQU,EAAMI,KAAKd,WAIF,SAACe,GACtB,MAAO,CACHC,qBAAsB,SAACC,GACnBF,EAASC,YAAqBC,KAElC1B,YAAa,SAACjB,GACVyC,EAASG,YAAyB5C,SAQ1C6C,IAFWX,CAGbhB","file":"static/js/3.2433b5f6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1CEZZ\",\"dialog\":\"Dialogs_dialog__1ZwtN\",\"messages\":\"Dialogs_messages__1waRj\",\"message\":\"Dialogs_message__1So3l\",\"dialogsItems\":\"Dialogs_dialogsItems__DYavD\",\"active\":\"Dialogs_active__2PeLR\"};","import {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    return <div>\r\n        <NavLink to={\"/dialogs/\" + props.profile_id}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default  DialogItem;","\r\nconst MessageItem = (props) =>{\r\n    return <div>{props.message}</div>\r\n}\r\n\r\nexport default  MessageItem;","import {Field, reduxForm} from \"redux-form\";\r\nimport {maxLength300, requiredFields} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormControls/FormControls\";\r\n\r\nlet AddMessageForm = (props) =>{\r\n    return<form onSubmit={props.handleSubmit}>\r\n        <Field component={Textarea}  name={'message'} validate={[requiredFields, maxLength300]}placeholder='Введите сообщение'/>\r\n        <div>\r\n            <button>Добавить сообщение</button>\r\n        </div>\r\n    </form>\r\n}\r\nconst AddMessageReduxForm = reduxForm({\r\n    form:'addPostForm'\r\n})(AddMessageForm)\r\n\r\nlet AddMessage = (props) =>{\r\n    const onSubmit = (formData) =>{\r\n        console.log(formData)\r\n        props.sendMessage(formData.message);\r\n    }\r\n\r\n    return <div>\r\n        <AddMessageReduxForm onSubmit ={onSubmit}/>\r\n    </div>\r\n}\r\n\r\nexport default AddMessage;","import style from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport MessageItem from \"./MessageItem/MesssageItem\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport AddMessage from \"./AddMessageForm/AddMessageForm\";\r\n\r\n\r\n\r\nconst Dialogs = (props) => {\r\n     let DialogMessages = props.DialogsMessages;\r\n     let DialogsProfiles = props.DialogsProfiles;\r\n    let DialogsElements = DialogsProfiles.map((profile) => <DialogItem name={profile.name} profile_id={profile.profile_id}/>);\r\n    let MessagesElements = DialogMessages.map((message) => <MessageItem  message = {message.message}/>\r\n    );\r\n\r\n    let onSendMessageClick = () =>{\r\n        props.sendMessage();\r\n    }\r\n\r\n    let onChangeMessageBody = (e) =>{\r\n        let body = e.target.value;\r\n        props.updateNewMessageBody(body);\r\n    }\r\n    if (!props.isAuth) return <Redirect to={\"/login\"} /> ;\r\n    return (\r\n        <div className={style.dialogs}>\r\n            <div className={style.dialogsItems}>\r\n                <div className={`${style.dialog} ${style.active}`} >{DialogsElements}</div>\r\n            </div>\r\n            <div className={style.messages}>\r\n                <div className = {style.message}>{MessagesElements}</div>\r\n               {/* <textarea value = {props.newMessageBody} placeholder='Введите сообщение' onChange={onChangeMessageBody}></textarea>\r\n                <div>\r\n                    <button onClick={onSendMessageClick}>Добавить сообщение</button>\r\n                </div>*/}\r\n                <AddMessage sendMessage ={props.sendMessage} ></AddMessage>\r\n            </div>\r\n            <div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialogs;","import {sendMessageActionCreator, updateNewMessageBody} from \"../../redux/messages-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        DialogsProfiles: state.messagesPage.profiles,\r\n        DialogsMessages: state.messagesPage.dialogs,\r\n        newMessageBody: state.messagesPage.newMessageBody,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateNewMessageBody: (text) => {\r\n            dispatch(updateNewMessageBody(text))\r\n        },\r\n        sendMessage: (message) => {\r\n            dispatch(sendMessageActionCreator(message));\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}